import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";
import { authTables } from "@convex-dev/auth/server";

const applicationTables = {
  doctors: defineTable({
    userId: v.id("users"),
    name: v.string(),
    specialization: v.string(),
    phone: v.optional(v.string()),
    clinicAddress: v.optional(v.string()),
    workingHours: v.object({
      start: v.string(),
      end: v.string(),
    }),
    workingDays: v.array(v.string()),
  }).index("by_user", ["userId"]),

  patients: defineTable({
    patientId: v.string(), // Unique ID generated by doctor
    name: v.string(),
    phone: v.string(),
    email: v.optional(v.string()),
    dateOfBirth: v.optional(v.string()),
    address: v.optional(v.string()),
    doctorId: v.id("doctors"),
    createdBy: v.id("users"), // Doctor who created this patient
    medicalNotes: v.optional(v.string()),
  })
    .index("by_patient_id", ["patientId"])
    .index("by_doctor", ["doctorId"])
    .index("by_created_by", ["createdBy"]),

  appointments: defineTable({
    patientId: v.id("patients"),
    doctorId: v.id("doctors"),
    appointmentDate: v.string(),
    appointmentTime: v.string(),
    status: v.union(
      v.literal("scheduled"),
      v.literal("completed"),
      v.literal("cancelled"),
      v.literal("pending")
    ),
    type: v.string(), // consultation, follow-up, etc.
    notes: v.optional(v.string()),
    diagnosis: v.optional(v.string()),
    prescription: v.optional(v.string()),
    requestedBy: v.union(v.literal("doctor"), v.literal("patient")),
  })
    .index("by_patient", ["patientId"])
    .index("by_doctor", ["doctorId"])
    .index("by_date", ["appointmentDate"])
    .index("by_status", ["status"]),

  notifications: defineTable({
    recipientId: v.string(), // Can be userId or patientId
    recipientType: v.union(v.literal("doctor"), v.literal("patient")),
    title: v.string(),
    message: v.string(),
    type: v.union(
      v.literal("appointment_reminder"),
      v.literal("appointment_request"),
      v.literal("appointment_confirmed"),
      v.literal("appointment_cancelled")
    ),
    isRead: v.boolean(),
    appointmentId: v.optional(v.id("appointments")),
  })
    .index("by_recipient", ["recipientId"])
    .index("by_type", ["type"])
    .index("by_read_status", ["isRead"]),
};

export default defineSchema({
  ...authTables,
  ...applicationTables,
});
